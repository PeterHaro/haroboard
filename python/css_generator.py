import subprocess
from shutil import copyfile
from shutil import rmtree

import os


# TODO: Move from the ruby compilation of sass into a python module to remove the sass gem requirement
class CSSGenerator(object):
    SCSS_FILENAME = "haroboard.scss"
    SASS_CACHE_DIRNAME = ".sass-cache"
    OUTPUT_FILENAME = "styles.css"
    OUTPUT_MINIFIED_FILENAME = "styles.min.css"
    OUTPUT_MAP_FILENAME = OUTPUT_FILENAME + ".map"

    def __init__(self, is_debug=False, root_directory="../private/scss/", output_directory="../public/styles/",
                 yui_compressor_path="../private/external/yuicompressor/yuicompressor-2.4.8.jar"):
        self.root_directory = root_directory
        self.output_directory = output_directory
        self.is_debug = is_debug
        self.yui_compressor_path = yui_compressor_path

    # Normally I would parse all scss files and generate multiple css files, however we only want one so it stays cached
    def compile_sass(self):
        """ I know shell = True is a security exception, however on Windows we need it to be active in order for
            subprocess to function as intended. The problem is due to the fact that python on windows is not able
            to resolve %PATH% variables which are extensive. I.E. Java is resolved because you have:
            JAVA_PATH = JAVA = PATH; Sass is a gem of ruby so you need a resolver from ruby->sass, and without
            shell=True this doesnt work.

            On a positive note, this is ok since we're in the deploy script simply to generate minified css
        """
        subprocess.call(["sass", self.root_directory + self.SCSS_FILENAME, self.root_directory + self.OUTPUT_FILENAME],
                        shell=True)

    def copy_css_output_to_output_directory(self):
        copyfile(self.root_directory + self.OUTPUT_FILENAME, self.output_directory + self.OUTPUT_FILENAME)

    def clean_up(self):
        # Remove the output css and map files as they do not belong in the sass folder
        try:
            os.remove(self.root_directory + self.OUTPUT_FILENAME)
            os.remove(self.root_directory + self.OUTPUT_MAP_FILENAME)
            rmtree(self.SASS_CACHE_DIRNAME) # The sass-cache generated by invoking the sass gem is located in the callee's folder. Therefore we need to remove it here
        except OSError, e:
            print ("Error: %s - %s." % (e.filename, e.strerror))

    def minify_output_css(self):
        print self.output_directory + self.OUTPUT_FILENAME
        if not self.is_debug:
            css_file = self.output_directory + self.OUTPUT_FILENAME
            compress_command = "java -jar \"" + self.yui_compressor_path + "\" \"" + css_file + "\" --type \"" + "css" + "\" -o \"" + self.output_directory + self.OUTPUT_MINIFIED_FILENAME + "\""
            print compress_command
            op = os.popen(compress_command)
            print op
        else:
            pass

    def run(self):
        self.compile_sass()
        self.copy_css_output_to_output_directory()
        self.minify_output_css()
        self.clean_up()


if __name__ == "__main__":
    CSSGenerator = CSSGenerator()
    CSSGenerator.run()
